sample 1:
Sat formula is: Implies(Implies(trainLate & ~taxi, johnLate), Implies(~johnLate, Implies(trainLate, taxi)))
writing cnf formula from sat : (johnLate | taxi | trainLate | ~trainLate) & (johnLate | taxi | ~johnLate | ~trainLate) & (johnLate | taxi | ~taxi | ~trainLate)
printing dimac formula using dimac convention.py [[3, 1, 2, -2], [3, 1, -3, -2], [3, 1, -1, -2]]

Satisfiable
Models:
{1: False, 2: False, 3: False}
{1: False, 2: False, 3: True}
{1: False, 2: True, 3: False}
{1: False, 2: True, 3: True}
{1: True, 2: True, 3: False}
{1: True, 2: True, 3: True}
{1: True, 2: False, 3: False}
{1: True, 2: False, 3: True}


getting dimac subsets and checking semantic entailment with sub sets generated.....
original formula is modified after removing the redundant sub formulas is/are:
[[3, 1, -3, -2], [3, 1, -1, -2]]
[[3, 1, 2, -2], [3, 1, -1, -2]]
[[3, 1, 2, -2], [3, 1, -3, -2]]
these are individually redundant at a time i.e when one is not present then only these particular sub formulas are redundant

sample 2:
Sat formula is: Implies(Implies(trainLate & ~taxi, johnLate), Implies(~johnLate, Implies(trainLate, taxi)))
writing cnf formula from sat : (johnLate | taxi | trainLate | ~trainLate) & (johnLate | taxi | ~johnLate | ~trainLate) & (johnLate | taxi | ~taxi | ~trainLate)
printing dimac formula using dimac convention.py [[3, 1, 2, -2], [3, 1, -3, -2], [3, 1, -1, -2]]

Satisfiable
Models:
{1: False, 2: False, 3: False}
{1: False, 2: False, 3: True}
{1: False, 2: True, 3: False}
{1: False, 2: True, 3: True}
{1: True, 2: True, 3: False}
{1: True, 2: True, 3: True}
{1: True, 2: False, 3: False}
{1: True, 2: False, 3: True}


getting dimac subsets and checking semantic entailment with sub sets generated.....
original formula is modified after removing the redundant sub formulas is/are:
[[3, 1, -3, -2], [3, 1, -1, -2]]
[[3, 1, 2, -2], [3, 1, -1, -2]]
[[3, 1, 2, -2], [3, 1, -3, -2]]
these are individually redundant at a time i.e when one is not present then only these particular sub formulas are redundant
