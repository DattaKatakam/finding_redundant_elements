sample 1:
Sat formula is: Implies(Implies(trainLate & ~taxi, johnLate), Implies(~johnLate, Implies(trainLate, taxi)))

writing cnf formula from sat : (johnLate | taxi | trainLate | ~trainLate) & (johnLate | taxi | ~johnLate | ~trainLate) & (johnLate | taxi | ~taxi | ~trainLate)
printing dimac formula using dimac convention.py [[2, 3, 1, -1], [2, 3, -2, -1], [2, 3, -3, -1]]
Satisfiable
Models:
{1: False, 2: False, 3: False}
{1: False, 2: False, 3: True}
{1: False, 2: True, 3: False}
{1: False, 2: True, 3: True}
{1: True, 2: True, 3: False}
{1: True, 2: True, 3: True}
{1: True, 2: False, 3: False}
{1: True, 2: False, 3: True}


getting dimac subsets
[2, 3, 1, -1] is non redundant in formula


[2, 3, 1, -1] is having same models
[2, 3, -2, -1] is non redundant in formula


[2, 3, -2, -1] is having same models
[2, 3, -3, -1] is non redundant in formula


[2, 3, -3, -1] is having same models


sample 2:
Sat formula is: (A | B) & (A | C) & (C | ~B) & (~A | ~B)

writing cnf formula from sat : (A | B) & (A | C) & (C | ~B) & (~A | ~B)
printing dimac formula using dimac convention.py [[1, 2], [1, 3], [3, -2], [-1, -2]]
Satisfiable
Models:
{1: True, 2: False, 3: True}
{1: True, 2: False, 3: False}
{1: False, 2: True, 3: True}


getting dimac subsets
[1, 2] is redundant in formula


[1, 2] is having different models
[1, 3] is redundant in formula


[1, 3] is having different models
[3, -2] is redundant in formula


[3, -2] is having same models
[-1, -2] is redundant in formula


[-1, -2] is having different models
