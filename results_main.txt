sample 1:
Sat formula is: Implies(Implies(trainLate & ~taxi, johnLate), Implies(~johnLate, Implies(trainLate, taxi)))
writing cnf formula from sat : (johnLate | taxi | trainLate | ~trainLate) & (johnLate | taxi | ~johnLate | ~trainLate) & (johnLate | taxi | ~taxi | ~trainLate)
printing dimac formula using dimac convention.py [[3, 2, 1, -1], [3, 2, -3, -1], [3, 2, -2, -1]]

Satisfiable
Models:
{1: False, 2: False, 3: False}
{1: False, 2: False, 3: True}
{1: False, 2: True, 3: False}
{1: False, 2: True, 3: True}
{1: True, 2: True, 3: False}
{1: True, 2: True, 3: True}
{1: True, 2: False, 3: False}
{1: True, 2: False, 3: True}


getting dimac subsets
[3, 2, 1, -1] is redundant in formula
[3, 2, -3, -1] is redundant in formula
[3, 2, -2, -1] is redundant in formula
redundant sub formulas in the main formula is/are:
[3, 2, 1, -1]
[3, 2, -3, -1]
[3, 2, -2, -1]
these are individually redundant at a time i.e when one is not present then only these particular sub formulas are redundant

sample 2:
Sat formula is: (A | B) & (A | C) & (C | ~B) & (~A | ~B)
writing cnf formula from sat : (A | B) & (A | C) & (C | ~B) & (~A | ~B)
printing dimac formula using dimac convention.py [[2, 1], [2, 3], [3, -1], [-2, -1]]

Satisfiable
Models:
{1: False, 2: True, 3: True}
{1: False, 2: True, 3: False}
{1: True, 2: False, 3: True}


getting dimac subsets
[2, 1] is non redundant in formula
[2, 3] is redundant in formula
[3, -1] is redundant in formula
[-2, -1] is non redundant in formula
redundant sub formulas in the main formula is/are:
[2, 3]
[3, -1]
these are individually redundant at a time i.e when one is not present then only these particular sub formulas are redundant
